# Generated by Django 5.0.6 on 2025-09-21 06:30

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('courses', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(blank=True, max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_message_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='conversations', to='courses.course')),
                ('last_message_sender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_message_conversations', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_conversations', to=settings.AUTH_USER_MODEL)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_conversations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-last_message_at'],
                'unique_together': {('teacher', 'student')},
            },
        ),
        migrations.CreateModel(
            name='CourseAnnouncement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('scheduled_for', models.DateTimeField(blank=True, null=True)),
                ('is_published', models.BooleanField(default=True)),
                ('is_pinned', models.BooleanField(default=False)),
                ('send_notification', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='announcements', to='courses.course')),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_announcements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-is_pinned', '-published_at', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CourseQA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_title', models.CharField(max_length=200)),
                ('question_text', models.TextField()),
                ('answer_text', models.TextField(blank=True)),
                ('answered_at', models.DateTimeField(blank=True, null=True)),
                ('is_answered', models.BooleanField(default=False)),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=True)),
                ('helpful_votes', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('answered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='course_answers', to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='qa_questions', to='courses.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_questions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-is_pinned', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CourseResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('resource_type', models.CharField(choices=[('pdf', 'PDF'), ('doc', 'Document'), ('link', 'External Link'), ('video', 'Video'), ('image', 'Image'), ('other', 'Other')], default='pdf', max_length=20)),
                ('file', models.FileField(blank=True, null=True, upload_to='course_resources/')),
                ('url', models.URLField(blank=True)),
                ('category', models.CharField(blank=True, help_text="e.g., 'Reference Materials', 'Additional Reading'", max_length=100)),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_public', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='additional_resources', to='courses.course')),
            ],
            options={
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('message_type', models.CharField(choices=[('text', 'Text'), ('assignment_question', 'Assignment Question'), ('course_question', 'Course Question'), ('general', 'General')], default='text', max_length=20)),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('is_read', models.BooleanField(default=False)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='courses.conversation')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('related_lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_messages', to='courses.lesson')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['sent_at'],
            },
        ),
        migrations.CreateModel(
            name='QuizConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_limit', models.PositiveIntegerField(default=30, help_text='Time limit in minutes')),
                ('passing_score', models.PositiveIntegerField(default=70, help_text='Passing score percentage')),
                ('max_attempts', models.PositiveIntegerField(default=3, help_text='Maximum attempts allowed')),
                ('randomize_questions', models.BooleanField(default=False)),
                ('show_correct_answers', models.BooleanField(default=True)),
                ('grading_policy', models.CharField(choices=[('highest', 'Highest Score'), ('latest', 'Latest Attempt'), ('average', 'Average Score'), ('first', 'First Attempt')], default='highest', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lesson', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_config', to='courses.lesson')),
            ],
        ),
        migrations.CreateModel(
            name='QuizQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_type', models.CharField(choices=[('multiple-choice', 'Multiple Choice'), ('true-false', 'True/False'), ('fill-blank', 'Fill in Blank'), ('drag-drop', 'Drag & Drop'), ('short-answer', 'Short Answer')], default='multiple-choice', max_length=20)),
                ('question_text', models.TextField()),
                ('question_image', models.ImageField(blank=True, null=True, upload_to='quiz_questions/')),
                ('explanation', models.TextField(blank=True)),
                ('points', models.PositiveIntegerField(default=1)),
                ('order', models.PositiveIntegerField(default=0)),
                ('blanks', models.JSONField(blank=True, default=list, help_text='List of correct answers for blanks')),
                ('drag_items', models.JSONField(blank=True, default=list, help_text='List of draggable items')),
                ('drop_zones', models.JSONField(blank=True, default=list, help_text='List of drop zones')),
                ('drag_drop_mappings', models.JSONField(blank=True, default=dict, help_text='Correct drag-drop mappings')),
                ('option_images', models.JSONField(blank=True, default=list, help_text='List of image URLs/paths for multiple choice options')),
                ('drag_item_images', models.JSONField(blank=True, default=list, help_text='List of image URLs/paths for drag items')),
                ('drop_zone_images', models.JSONField(blank=True, default=list, help_text='List of image URLs/paths for drop zones')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_questions', to='courses.lesson')),
            ],
            options={
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='QuizAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.CharField(max_length=500)),
                ('answer_image', models.ImageField(blank=True, null=True, upload_to='quiz_answers/')),
                ('is_correct', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(default=0)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='courses.quizquestion')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='VideoCheckpointQuiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('question_type', models.CharField(choices=[('multiple-choice', 'Multiple Choice'), ('true-false', 'True/False')], default='multiple-choice', max_length=20)),
                ('options', models.JSONField(default=list, help_text='List of answer options')),
                ('correct_answer_index', models.IntegerField(help_text='Index of correct answer (0-based)')),
                ('explanation', models.TextField(blank=True, help_text='Explanation shown after answering')),
                ('timestamp_seconds', models.IntegerField(help_text='Time in seconds when quiz should appear')),
                ('title', models.CharField(blank=True, help_text='Optional title for the checkpoint quiz', max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='video_checkpoint_quizzes', to='courses.lesson')),
            ],
            options={
                'ordering': ['timestamp_seconds'],
                'unique_together': {('lesson', 'timestamp_seconds')},
            },
        ),
        migrations.CreateModel(
            name='CheckpointQuizResponse',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('selected_answer_index', models.IntegerField()),
                ('is_correct', models.BooleanField(default=False)),
                ('responded_at', models.DateTimeField(auto_now_add=True)),
                ('time_taken', models.DurationField(blank=True, null=True)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checkpoint_responses', to='courses.lesson')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checkpoint_responses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-responded_at'],
                'unique_together': {('student', 'lesson')},
            },
        ),
        migrations.CreateModel(
            name='CourseBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('badge_type', models.CharField(blank=True, max_length=20, null=True)),
                ('awarded_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('enrollment_count', models.IntegerField(blank=True, null=True)),
                ('average_rating', models.FloatField(blank=True, null=True)),
                ('view_count', models.IntegerField(blank=True, null=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badges', to='courses.course')),
            ],
            options={
                'indexes': [models.Index(fields=['course', 'badge_type'], name='courses_cou_course__a7dd94_idx'), models.Index(fields=['badge_type', 'is_active'], name='courses_cou_badge_t_6839af_idx')],
                'unique_together': {('course', 'badge_type')},
            },
        ),
        migrations.CreateModel(
            name='CourseRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')])),
                ('review_title', models.CharField(blank=True, max_length=200)),
                ('review_text', models.TextField(blank=True)),
                ('content_quality', models.IntegerField(blank=True, choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')], null=True)),
                ('instructor_quality', models.IntegerField(blank=True, choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')], null=True)),
                ('difficulty_level', models.IntegerField(blank=True, choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')], null=True)),
                ('value_for_money', models.IntegerField(blank=True, choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')], null=True)),
                ('is_public', models.BooleanField(default=True)),
                ('is_verified_purchase', models.BooleanField(default=False)),
                ('helpful_votes', models.IntegerField(default=0)),
                ('is_approved', models.BooleanField(default=True)),
                ('moderation_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='courses.course')),
                ('enrollment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rating', to='courses.enrollment')),
                ('moderated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderated_ratings', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_ratings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['course', 'rating'], name='courses_cou_course__faf1ba_idx'), models.Index(fields=['course', 'is_public', 'is_approved'], name='courses_cou_course__4594b8_idx')],
                'unique_together': {('course', 'student')},
            },
        ),
        migrations.CreateModel(
            name='QuizAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(default=0.0)),
                ('total_questions', models.PositiveIntegerField(default=0)),
                ('correct_answers', models.PositiveIntegerField(default=0)),
                ('completed_at', models.DateTimeField(auto_now_add=True)),
                ('time_taken', models.DurationField(blank=True, null=True)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_lesson', to='courses.lesson')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_attempt_student', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-completed_at'],
                'unique_together': {('student', 'lesson')},
            },
        ),
        migrations.CreateModel(
            name='VideoCheckpointResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selected_answer_index', models.IntegerField()),
                ('is_correct', models.BooleanField(default=False)),
                ('responded_at', models.DateTimeField(auto_now_add=True)),
                ('time_taken', models.DurationField(blank=True, null=True)),
                ('checkpoint_quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='courses.videocheckpointquiz')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='video_checkpoint_responses', to='courses.lesson')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='video_checkpoint_responses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-responded_at'],
                'unique_together': {('student', 'checkpoint_quiz')},
            },
        ),
    ]
